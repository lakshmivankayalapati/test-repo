name: Comprehensive CI Pipeline

on:
  pull_request:
    branches: [ dev, main ]
  push:
    branches: [ dev, main ]

env:
  FLUTTER_VERSION: "3.24.5"
  JAVA_VERSION: "11"
  ANDROID_API_LEVEL: "33"
  ANDROID_BUILD_TOOLS: "33.0.0"

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      status: ${{ steps.test_run.outputs.status }}
      passed_tests: ${{ steps.test_run.outputs.passed_tests }}
      failed_tests: ${{ steps.test_run.outputs.failed_tests }}
      total_tests: ${{ steps.test_run.outputs.total_tests }}
      failure_details: ${{ steps.test_run.outputs.failure_details }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Run unit tests with detailed output
        id: test_run
        run: |
          echo "Running unit tests..."
          
          # Create detailed output file
          flutter test test/unit/ --reporter=expanded --coverage > unit_test_output.txt 2>&1 || true
          
          # Extract test results with detailed analysis
          echo "Analyzing unit test results..."
          
          # Count passed and failed tests
          PASSED_TESTS=$(grep -c "✓" unit_test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "✗" unit_test_output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Extract failure details
          FAILURE_DETAILS=""
          if [ $FAILED_TESTS -gt 0 ]; then
            FAILURE_DETAILS=$(grep -A 10 -B 2 "✗" unit_test_output.txt | head -50 | tr '\n' ' ' | sed 's/  */ /g')
          fi
          
          echo "status=$([ $FAILED_TESTS -eq 0 ] && echo "passed" || echo "failed")" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failure_details=$FAILURE_DETAILS" >> $GITHUB_OUTPUT
          
          # Always exit successfully to continue pipeline
          exit 0
        
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            unit_test_output.txt
            test-results/
            coverage/
          retention-days: 30

  # Widget Tests (Rendering & Semantic)
  widget-tests:
    name: Widget Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      status: ${{ steps.test_run.outputs.status }}
      passed_tests: ${{ steps.test_run.outputs.passed_tests }}
      failed_tests: ${{ steps.test_run.outputs.failed_tests }}
      total_tests: ${{ steps.test_run.outputs.total_tests }}
      failure_details: ${{ steps.test_run.outputs.failure_details }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Run widget tests with detailed output
        id: test_run
        run: |
          echo "Running widget tests..."
          
          # Create detailed output file
          flutter test test/widget_test.dart --reporter=expanded > widget_test_output.txt 2>&1 || true
          
          # Extract test results with detailed analysis
          echo "Analyzing widget test results..."
          
          # Count passed and failed tests
          PASSED_TESTS=$(grep -c "✓" widget_test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "✗" widget_test_output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Extract failure details
          FAILURE_DETAILS=""
          if [ $FAILED_TESTS -gt 0 ]; then
            FAILURE_DETAILS=$(grep -A 10 -B 2 "✗" widget_test_output.txt | head -50 | tr '\n' ' ' | sed 's/  */ /g')
          fi
          
          echo "status=$([ $FAILED_TESTS -eq 0 ] && echo "passed" || echo "failed")" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failure_details=$FAILURE_DETAILS" >> $GITHUB_OUTPUT
          
          # Always exit successfully to continue pipeline
          exit 0
        
      - name: Upload widget test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: widget-test-results
          path: |
            widget_test_output.txt
            test-results/
          retention-days: 30

  # Golden Tests
  golden-tests:
    name: Golden Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      status: ${{ steps.test_run.outputs.status }}
      passed_tests: ${{ steps.test_run.outputs.passed_tests }}
      failed_tests: ${{ steps.test_run.outputs.failed_tests }}
      total_tests: ${{ steps.test_run.outputs.total_tests }}
      failure_details: ${{ steps.test_run.outputs.failure_details }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Install dependencies for golden tests
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

      - name: Run golden tests with detailed output
        id: test_run
        run: |
          echo "Running golden tests..."
          
          # Create detailed output file
          flutter test goldens/golden_test.dart --reporter=expanded > golden_test_output.txt 2>&1 || true
          
          # Extract test results with detailed analysis
          echo "Analyzing golden test results..."
          
          # Count passed and failed tests
          PASSED_TESTS=$(grep -c "✓" golden_test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "✗" golden_test_output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Extract failure details
          FAILURE_DETAILS=""
          if [ $FAILED_TESTS -gt 0 ]; then
            FAILURE_DETAILS=$(grep -A 10 -B 2 "✗" golden_test_output.txt | head -50 | tr '\n' ' ' | sed 's/  */ /g')
          fi
          
          echo "status=$([ $FAILED_TESTS -eq 0 ] && echo "passed" || echo "failed")" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failure_details=$FAILURE_DETAILS" >> $GITHUB_OUTPUT
          
          # Always exit successfully to continue pipeline
          exit 0
        
      - name: Upload golden test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: golden-test-results
          path: |
            golden_test_output.txt
            test-results/
            goldens/goldens/
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      status: ${{ steps.test_run.outputs.status }}
      passed_tests: ${{ steps.test_run.outputs.passed_tests }}
      failed_tests: ${{ steps.test_run.outputs.failed_tests }}
      total_tests: ${{ steps.test_run.outputs.total_tests }}
      failure_details: ${{ steps.test_run.outputs.failure_details }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Run accessibility tests with detailed output
        id: test_run
        run: |
          echo "Running accessibility tests..."
          
          # Create detailed output file
          flutter test test/accessibility_test.dart --reporter=expanded > accessibility_test_output.txt 2>&1 || true
          
          # Extract test results with detailed analysis
          echo "Analyzing accessibility test results..."
          
          # Count passed and failed tests
          PASSED_TESTS=$(grep -c "✓" accessibility_test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "✗" accessibility_test_output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Extract failure details
          FAILURE_DETAILS=""
          if [ $FAILED_TESTS -gt 0 ]; then
            FAILURE_DETAILS=$(grep -A 10 -B 2 "✗" accessibility_test_output.txt | head -50 | tr '\n' ' ' | sed 's/  */ /g')
          fi
          
          echo "status=$([ $FAILED_TESTS -eq 0 ] && echo "passed" || echo "failed")" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failure_details=$FAILURE_DETAILS" >> $GITHUB_OUTPUT
          
          # Always exit successfully to continue pipeline
          exit 0
        
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            accessibility_test_output.txt
            test-results/
          retention-days: 30

  # Appium Tests (Android) - Only if appium_tests directory exists
  appium-tests-android:
    name: Appium Tests (Android)
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      status: ${{ steps.test_run.outputs.status }}
      passed_tests: ${{ steps.test_run.outputs.passed_tests }}
      failed_tests: ${{ steps.test_run.outputs.failed_tests }}
      total_tests: ${{ steps.test_run.outputs.total_tests }}
      failure_details: ${{ steps.test_run.outputs.failure_details }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Create Android Virtual Device
        run: |
          echo "Creating AVD for API level ${{ env.ANDROID_API_LEVEL }}"
          $ANDROID_HOME/emulator/emulator -list-avds
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            -n "test_device_api_${{ env.ANDROID_API_LEVEL }}" \
            -k "system-images;android-${{ env.ANDROID_API_LEVEL }};google_apis;x86_64" \
            --force

      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: |
            adb shell input keyevent 82 &
            adb shell input keyevent 82 &
            adb shell input keyevent 82 &

      - name: Build Flutter APK
        run: |
          flutter build apk --debug
          flutter build apk --profile

      - name: Install Appium dependencies
        run: |
          cd appium_tests
          flutter pub get
          dart pub global activate webdriver

      - name: Start Appium Server
        run: |
          npm install -g appium
          appium --base-path /wd/hub &
          sleep 10

      - name: Run Appium tests with detailed output
        id: test_run
        run: |
          cd appium_tests
          echo "Running Appium tests for API level ${{ env.ANDROID_API_LEVEL }}..."
          
          # Create detailed output file
          dart run android13_test.dart > appium_test_output.txt 2>&1 || true
          
          # Extract test results with detailed analysis
          echo "Analyzing Appium test results..."
          
          # Count passed and failed tests (basic counting)
          PASSED_TESTS=$(grep -c "PASSED\|SUCCESS\|✓" appium_test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "FAILED\|ERROR\|✗" appium_test_output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Extract failure details
          FAILURE_DETAILS=""
          if [ $FAILED_TESTS -gt 0 ]; then
            FAILURE_DETAILS=$(grep -A 10 -B 2 "FAILED\|ERROR\|✗" appium_test_output.txt | head -50 | tr '\n' ' ' | sed 's/  */ /g')
          fi
          
          echo "status=$([ $FAILED_TESTS -eq 0 ] && echo "passed" || echo "failed")" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failure_details=$FAILURE_DETAILS" >> $GITHUB_OUTPUT
          
          # Always exit successfully to continue pipeline
          exit 0

      - name: Upload Appium test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: appium-test-results
          path: |
            appium_tests/appium_test_output.txt
            appium_tests/test-results/
            appium_tests/screenshots/
          retention-days: 30

  # Appium Tests (Web/PWA) - Only if appium_tests directory exists
  appium-tests-web:
    name: Appium Tests (Web/PWA)
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      status: ${{ steps.test_run.outputs.status }}
      passed_tests: ${{ steps.test_run.outputs.passed_tests }}
      failed_tests: ${{ steps.test_run.outputs.failed_tests }}
      total_tests: ${{ steps.test_run.outputs.total_tests }}
      failure_details: ${{ steps.test_run.outputs.failure_details }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Build Flutter Web
        run: flutter build web --release

      - name: Install Chrome
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Appium dependencies
        run: |
          cd appium_tests
          flutter pub get
          dart pub global activate webdriver

      - name: Start Appium Server
        run: |
          npm install -g appium
          appium --base-path /wd/hub &
          sleep 10

      - name: Start Flutter Web Server
        run: |
          cd build/web
          python3 -m http.server 8080 &
          sleep 5

      - name: Run Web Appium tests with detailed output
        id: test_run
        run: |
          cd appium_tests
          echo "Running Web Appium tests..."
          
          # Create detailed output file
          dart run chrome_pwa_test.dart > web_appium_test_output.txt 2>&1 || true
          
          # Extract test results with detailed analysis
          echo "Analyzing Web Appium test results..."
          
          # Count passed and failed tests
          PASSED_TESTS=$(grep -c "PASSED\|SUCCESS\|✓" web_appium_test_output.txt || echo "0")
          FAILED_TESTS=$(grep -c "FAILED\|ERROR\|✗" web_appium_test_output.txt || echo "0")
          TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
          
          # Extract failure details
          FAILURE_DETAILS=""
          if [ $FAILED_TESTS -gt 0 ]; then
            FAILURE_DETAILS=$(grep -A 10 -B 2 "FAILED\|ERROR\|✗" web_appium_test_output.txt | head -50 | tr '\n' ' ' | sed 's/  */ /g')
          fi
          
          echo "status=$([ $FAILED_TESTS -eq 0 ] && echo "passed" || echo "failed")" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failure_details=$FAILURE_DETAILS" >> $GITHUB_OUTPUT
          
          # Always exit successfully to continue pipeline
          exit 0

      - name: Upload Web Appium test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: appium-web-test-results
          path: |
            appium_tests/web_appium_test_output.txt
            appium_tests/test-results/
            appium_tests/screenshots/
          retention-days: 30

  # Comprehensive Test Results Summary
  test-summary:
    name: Comprehensive Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, widget-tests, golden-tests, accessibility-tests, appium-tests-android, appium-tests-web]
    if: always()
    outputs:
      overall_status: ${{ steps.generate_report.outputs.overall_status }}
      total_passed: ${{ steps.generate_report.outputs.total_passed }}
      total_failed: ${{ steps.generate_report.outputs.total_failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Generate Comprehensive Test Report
        id: generate_report
        run: |
          echo "# Comprehensive Test Results Report" > comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          echo "## Executive Summary" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          
          # Calculate overall statistics
          TOTAL_JOBS=6
          PASSED_JOBS=0
          FAILED_JOBS=0
          TOTAL_PASSED_TESTS=0
          TOTAL_FAILED_TESTS=0
          
          # Unit Tests
          if [[ "${{ needs.unit-tests.outputs.status }}" == "passed" ]]; then
            PASSED_JOBS=$((PASSED_JOBS + 1))
            TOTAL_PASSED_TESTS=$((TOTAL_PASSED_TESTS + ${{ needs.unit-tests.outputs.passed_tests }}))
          else
            FAILED_JOBS=$((FAILED_JOBS + 1))
            TOTAL_FAILED_TESTS=$((TOTAL_FAILED_TESTS + ${{ needs.unit-tests.outputs.failed_tests }}))
          fi
          
          # Widget Tests
          if [[ "${{ needs.widget-tests.outputs.status }}" == "passed" ]]; then
            PASSED_JOBS=$((PASSED_JOBS + 1))
            TOTAL_PASSED_TESTS=$((TOTAL_PASSED_TESTS + ${{ needs.widget-tests.outputs.passed_tests }}))
          else
            FAILED_JOBS=$((FAILED_JOBS + 1))
            TOTAL_FAILED_TESTS=$((TOTAL_FAILED_TESTS + ${{ needs.widget-tests.outputs.failed_tests }}))
          fi
          
          # Golden Tests
          if [[ "${{ needs.golden-tests.outputs.status }}" == "passed" ]]; then
            PASSED_JOBS=$((PASSED_JOBS + 1))
            TOTAL_PASSED_TESTS=$((TOTAL_PASSED_TESTS + ${{ needs.golden-tests.outputs.passed_tests }}))
          else
            FAILED_JOBS=$((FAILED_JOBS + 1))
            TOTAL_FAILED_TESTS=$((TOTAL_FAILED_TESTS + ${{ needs.golden-tests.outputs.failed_tests }}))
          fi
          
          # Accessibility Tests
          if [[ "${{ needs.accessibility-tests.outputs.status }}" == "passed" ]]; then
            PASSED_JOBS=$((PASSED_JOBS + 1))
            TOTAL_PASSED_TESTS=$((TOTAL_PASSED_TESTS + ${{ needs.accessibility-tests.outputs.passed_tests }}))
          else
            FAILED_JOBS=$((FAILED_JOBS + 1))
            TOTAL_FAILED_TESTS=$((TOTAL_FAILED_TESTS + ${{ needs.accessibility-tests.outputs.failed_tests }}))
          fi
          
          # Appium Android Tests
          if [[ "${{ needs.appium-tests-android.outputs.status }}" == "passed" ]]; then
            PASSED_JOBS=$((PASSED_JOBS + 1))
            TOTAL_PASSED_TESTS=$((TOTAL_PASSED_TESTS + ${{ needs.appium-tests-android.outputs.passed_tests }}))
          else
            FAILED_JOBS=$((FAILED_JOBS + 1))
            TOTAL_FAILED_TESTS=$((TOTAL_FAILED_TESTS + ${{ needs.appium-tests-android.outputs.failed_tests }}))
          fi
          
          # Appium Web Tests
          if [[ "${{ needs.appium-tests-web.outputs.status }}" == "passed" ]]; then
            PASSED_JOBS=$((PASSED_JOBS + 1))
            TOTAL_PASSED_TESTS=$((TOTAL_PASSED_TESTS + ${{ needs.appium-tests-web.outputs.passed_tests }}))
          else
            FAILED_JOBS=$((FAILED_JOBS + 1))
            TOTAL_FAILED_TESTS=$((TOTAL_FAILED_TESTS + ${{ needs.appium-tests-web.outputs.failed_tests }}))
          fi
          
          TOTAL_TESTS=$((TOTAL_PASSED_TESTS + TOTAL_FAILED_TESTS))
          SUCCESS_RATE=$((PASSED_JOBS * 100 / TOTAL_JOBS))
          
          echo "- **Total Test Suites**: $TOTAL_JOBS" >> comprehensive-test-report.md
          echo "- **Passed Test Suites**: $PASSED_JOBS" >> comprehensive-test-report.md
          echo "- **Failed Test Suites**: $FAILED_JOBS" >> comprehensive-test-report.md
          echo "- **Total Individual Tests**: $TOTAL_TESTS" >> comprehensive-test-report.md
          echo "- **Passed Individual Tests**: $TOTAL_PASSED_TESTS" >> comprehensive-test-report.md
          echo "- **Failed Individual Tests**: $TOTAL_FAILED_TESTS" >> comprehensive-test-report.md
          echo "- **Success Rate**: $SUCCESS_RATE%" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          
          if [[ $FAILED_JOBS -eq 0 ]]; then
            echo "**All test suites passed successfully!**" >> comprehensive-test-report.md
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "**$FAILED_JOBS test suite(s) failed. Pull request cannot be merged.**" >> comprehensive-test-report.md
            echo "status=failed" >> $GITHUB_OUTPUT
          fi
          
          echo "total_passed=$TOTAL_PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "total_failed=$TOTAL_FAILED_TESTS" >> $GITHUB_OUTPUT
          
          echo "" >> comprehensive-test-report.md
          echo "## Detailed Test Results" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          
          # Unit Tests Section
          echo "### Unit Tests" >> comprehensive-test-report.md
          echo "- **Status**: ${{ needs.unit-tests.outputs.status }}" >> comprehensive-test-report.md
          echo "- **Passed Tests**: ${{ needs.unit-tests.outputs.passed_tests }}" >> comprehensive-test-report.md
          echo "- **Failed Tests**: ${{ needs.unit-tests.outputs.failed_tests }}" >> comprehensive-test-report.md
          echo "- **Total Tests**: ${{ needs.unit-tests.outputs.total_tests }}" >> comprehensive-test-report.md
          if [[ "${{ needs.unit-tests.outputs.status }}" == "passed" ]]; then
            echo "- **Result**: PASSED" >> comprehensive-test-report.md
          else
            echo "- **Result**: FAILED" >> comprehensive-test-report.md
            echo "- **Failure Details**: ${{ needs.unit-tests.outputs.failure_details }}" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Widget Tests Section
          echo "### Widget Tests (Rendering & Semantic)" >> comprehensive-test-report.md
          echo "- **Status**: ${{ needs.widget-tests.outputs.status }}" >> comprehensive-test-report.md
          echo "- **Passed Tests**: ${{ needs.widget-tests.outputs.passed_tests }}" >> comprehensive-test-report.md
          echo "- **Failed Tests**: ${{ needs.widget-tests.outputs.failed_tests }}" >> comprehensive-test-report.md
          echo "- **Total Tests**: ${{ needs.widget-tests.outputs.total_tests }}" >> comprehensive-test-report.md
          if [[ "${{ needs.widget-tests.outputs.status }}" == "passed" ]]; then
            echo "- **Result**: PASSED" >> comprehensive-test-report.md
          else
            echo "- **Result**: FAILED" >> comprehensive-test-report.md
            echo "- **Failure Details**: ${{ needs.widget-tests.outputs.failure_details }}" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Golden Tests Section
          echo "### Golden Tests" >> comprehensive-test-report.md
          echo "- **Status**: ${{ needs.golden-tests.outputs.status }}" >> comprehensive-test-report.md
          echo "- **Passed Tests**: ${{ needs.golden-tests.outputs.passed_tests }}" >> comprehensive-test-report.md
          echo "- **Failed Tests**: ${{ needs.golden-tests.outputs.failed_tests }}" >> comprehensive-test-report.md
          echo "- **Total Tests**: ${{ needs.golden-tests.outputs.total_tests }}" >> comprehensive-test-report.md
          if [[ "${{ needs.golden-tests.outputs.status }}" == "passed" ]]; then
            echo "- **Result**: PASSED" >> comprehensive-test-report.md
          else
            echo "- **Result**: FAILED" >> comprehensive-test-report.md
            echo "- **Failure Details**: ${{ needs.golden-tests.outputs.failure_details }}" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Accessibility Tests Section
          echo "### Accessibility Tests" >> comprehensive-test-report.md
          echo "- **Status**: ${{ needs.accessibility-tests.outputs.status }}" >> comprehensive-test-report.md
          echo "- **Passed Tests**: ${{ needs.accessibility-tests.outputs.passed_tests }}" >> comprehensive-test-report.md
          echo "- **Failed Tests**: ${{ needs.accessibility-tests.outputs.failed_tests }}" >> comprehensive-test-report.md
          echo "- **Total Tests**: ${{ needs.accessibility-tests.outputs.total_tests }}" >> comprehensive-test-report.md
          if [[ "${{ needs.accessibility-tests.outputs.status }}" == "passed" ]]; then
            echo "- **Result**: PASSED" >> comprehensive-test-report.md
          else
            echo "- **Result**: FAILED" >> comprehensive-test-report.md
            echo "- **Failure Details**: ${{ needs.accessibility-tests.outputs.failure_details }}" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Appium Tests Section
          echo "### Appium Tests (Android)" >> comprehensive-test-report.md
          echo "- **Status**: ${{ needs.appium-tests-android.outputs.status }}" >> comprehensive-test-report.md
          echo "- **Passed Tests**: ${{ needs.appium-tests-android.outputs.passed_tests }}" >> comprehensive-test-report.md
          echo "- **Failed Tests**: ${{ needs.appium-tests-android.outputs.failed_tests }}" >> comprehensive-test-report.md
          echo "- **Total Tests**: ${{ needs.appium-tests-android.outputs.total_tests }}" >> comprehensive-test-report.md
          if [[ "${{ needs.appium-tests-android.outputs.status }}" == "passed" ]]; then
            echo "- **Result**: PASSED" >> comprehensive-test-report.md
          else
            echo "- **Result**: FAILED" >> comprehensive-test-report.md
            echo "- **Failure Details**: ${{ needs.appium-tests-android.outputs.failure_details }}" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Web Appium Tests Section
          echo "### Appium Tests (Web/PWA)" >> comprehensive-test-report.md
          echo "- **Status**: ${{ needs.appium-tests-web.outputs.status }}" >> comprehensive-test-report.md
          echo "- **Passed Tests**: ${{ needs.appium-tests-web.outputs.passed_tests }}" >> comprehensive-test-report.md
          echo "- **Failed Tests**: ${{ needs.appium-tests-web.outputs.failed_tests }}" >> comprehensive-test-report.md
          echo "- **Total Tests**: ${{ needs.appium-tests-web.outputs.total_tests }}" >> comprehensive-test-report.md
          if [[ "${{ needs.appium-tests-web.outputs.status }}" == "passed" ]]; then
            echo "- **Result**: PASSED" >> comprehensive-test-report.md
          else
            echo "- **Result**: FAILED" >> comprehensive-test-report.md
            echo "- **Failure Details**: ${{ needs.appium-tests-web.outputs.failure_details }}" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Failure Analysis Section
          if [[ $FAILED_JOBS -gt 0 ]]; then
            echo "## Failure Analysis" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
            echo "### Common Failure Reasons:" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
            echo "#### Unit Tests Failures:" >> comprehensive-test-report.md
            echo "- Business logic errors" >> comprehensive-test-report.md
            echo "- Null pointer exceptions" >> comprehensive-test-report.md
            echo "- Incorrect return values" >> comprehensive-test-report.md
            echo "- Missing dependencies" >> comprehensive-test-report.md
            echo "- Mock setup issues" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
            echo "#### Widget Tests Failures:" >> comprehensive-test-report.md
            echo "- UI rendering issues" >> comprehensive-test-report.md
            echo "- Widget lifecycle problems" >> comprehensive-test-report.md
            echo "- State management errors" >> comprehensive-test-report.md
            echo "- Navigation issues" >> comprehensive-test-report.md
            echo "- Element not found errors" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
            echo "#### Golden Tests Failures:" >> comprehensive-test-report.md
            echo "- Visual regression changes" >> comprehensive-test-report.md
            echo "- Screen size rendering differences" >> comprehensive-test-report.md
            echo "- Font rendering variations" >> comprehensive-test-report.md
            echo "- Color scheme changes" >> comprehensive-test-report.md
            echo "- Layout shifts" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
            echo "#### Accessibility Tests Failures:" >> comprehensive-test-report.md
            echo "- Missing accessibility labels" >> comprehensive-test-report.md
            echo "- Poor contrast ratios" >> comprehensive-test-report.md
            echo "- Missing semantic information" >> comprehensive-test-report.md
            echo "- Navigation accessibility issues" >> comprehensive-test-report.md
            echo "- Screen reader compatibility" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
            echo "#### Appium Tests Failures:" >> comprehensive-test-report.md
            echo "- Element not found errors" >> comprehensive-test-report.md
            echo "- Timing issues with UI elements" >> comprehensive-test-report.md
            echo "- Device/emulator compatibility issues" >> comprehensive-test-report.md
            echo "- Network connectivity problems" >> comprehensive-test-report.md
            echo "- Appium server issues" >> comprehensive-test-report.md
            echo "" >> comprehensive-test-report.md
          fi
          
          # Next Steps Section
          echo "## Next Steps" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          if [[ $FAILED_JOBS -eq 0 ]]; then
            echo "**All tests passed!** This pull request is ready for review and merge." >> comprehensive-test-report.md
          else
            echo "**Tests failed!** Please:" >> comprehensive-test-report.md
            echo "1. Review the detailed logs in the artifacts section" >> comprehensive-test-report.md
            echo "2. Fix the identified issues" >> comprehensive-test-report.md
            echo "3. Re-run the tests locally to verify fixes" >> comprehensive-test-report.md
            echo "4. Push updated code to trigger new CI run" >> comprehensive-test-report.md
            echo "5. **This pull request cannot be merged until all tests pass**" >> comprehensive-test-report.md
          fi
          echo "" >> comprehensive-test-report.md
          
          # Artifacts Section
          echo "## Detailed Logs and Artifacts" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          echo "Download the following artifacts for detailed test logs:" >> comprehensive-test-report.md
          echo "- `unit-test-results` - Unit test output and coverage" >> comprehensive-test-report.md
          echo "- `widget-test-results` - Widget test output" >> comprehensive-test-report.md
          echo "- `golden-test-results` - Golden test output and images" >> comprehensive-test-report.md
          echo "- `accessibility-test-results` - Accessibility test output" >> comprehensive-test-report.md
          echo "- `appium-test-results` - Appium Android test output" >> comprehensive-test-report.md
          echo "- `appium-web-test-results` - Appium Web test output" >> comprehensive-test-report.md
          echo "" >> comprehensive-test-report.md
          
          # Footer
          echo "---" >> comprehensive-test-report.md
          echo "*Report generated automatically by CI Pipeline*" >> comprehensive-test-report.md
          echo "*Generated at: $(date)*" >> comprehensive-test-report.md

      - name: Upload Comprehensive Test Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: comprehensive-test-report.md
          retention-days: 30

      - name: Comment Comprehensive Report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('comprehensive-test-report.md', 'utf8');
            const comment = '## Comprehensive Test Results Report\n\n' + report + '\n\n---\n**Note**: This is an automated report. Please review the detailed logs in the artifacts section for specific failure reasons.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Final Status Check - This job will fail if any tests failed
  final-status:
    name: Final Status Check
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    steps:
      - name: Check if all tests passed
        run: |
          echo "Checking final status of all test suites..."
          
          if [[ "${{ needs.test-summary.outputs.overall_status }}" == "passed" ]]; then
            echo "All test suites passed successfully!"
            echo "Pull request is ready for merge"
            exit 0
          else
            echo "Some test suites failed!"
            echo "Pull request cannot be merged"
            echo ""
            echo "Test Summary:"
            echo "- Total Passed Tests: ${{ needs.test-summary.outputs.total_passed }}"
            echo "- Total Failed Tests: ${{ needs.test-summary.outputs.total_failed }}"
            echo ""
            echo "Please fix the failing tests and push updated code to trigger a new CI run."
            echo "Review the comprehensive test report for detailed failure information."
            exit 1
          fi 